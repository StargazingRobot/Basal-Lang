## New Basal Grammar

    Program := { Statement ENDL }

    Statement := IfStatement 
           | WhileStatement 
           | ForStatement 
           | ReservedFunction
           | AssignementStatement
           | DeclarationStatement

	AssignementStatement := Identifier "=" Expression
	Identifier := Letter {(Letter|Digit|_)}
    
    DeclarationStatement := ("var"|"bin") Identifier ["=" Expression]

    Expression := SimpleExpression [RelationalOperator SimpleExpression]
    
	SimpleExpression := Term {AdditiveOperator Term}
	Term := Factor {MultiplicativeOperator Factor}
	Factor := Number | Identifier | "(" Expression ")"

	Identifier := Letter { (Letter|Digit|"_") }

	AdditiveOperator := "+" | "-" | "OR"                            // depend on priority
	MultiplicativeOperator := "*" | "/" | "%" | "AND"               // same
	RelationalOperator := "==" | "!=" | "<" | ">" | "<=" | ">="
	Digit  := "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
    Number := ("-")?{digit}+|"True"|"False"
	Letter := "a"|...|"z"





var cpt = 0
bin res = False

FOR var i = 0 TO 10 
    cpt = cpt + 1       # increment cpt
    disp( cpt )
END


// from pascal :

procedures: do not return a value
functions : return a single value 


PROC SQUARE var a, b 
    IF a < b THEN
        RETURN a*a
    ELSE
        RETURN b*b 
    END
END


FUNC SQUARE var a, b RET var
START
    IF a < b THEN
        RETURN a*a
    ELSE
        RETURN b*b 
    END
STOP

Label_test:


GOTO Label_test


int     
float   
bin     



func isbigger( a, b ): bin
    if( a > b ) return True;
    else return False;
    end
end




var b = SQUARE 4, 5
